<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Obafemi Awolowo University - Students Support System</title>
  <style>
    body {
      font-family: 'Roboto', Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f0f4f8;
      color: #333;
    }

    header {
      background: linear-gradient(90deg, #004d99, #0066cc);
      color: white;
      padding: 20px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    header h1 {
      margin: 0;
      font-size: 1.9rem;
    }

    header h2 {
      margin: 5px 0 0;
      font-weight: 300;
      font-size: 1.2rem;
    }

    .container {
      max-width: 1200px;
      margin: 30px auto;
      padding: 20px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
    }

    .section {
      margin-bottom: 30px;
    }

    .section h3 {
      margin-bottom: 15px;
      color: #004d99;
      font-size: 1.8rem;
      border-bottom: 2px solid #004d99;
      padding-bottom: 5px;
    }

    /* Scrollable Class Scheduler Section */
    .table-wrapper {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 8px;
      margin-bottom: 15px;
    }

    #schedule table {
      width: 100%;
      border-collapse: collapse;
      min-width: 700px;
      font-size: 1rem;
    }

    #schedule th, #schedule td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: left;
    }

    #schedule th {
      background-color: #004d99;
      color: white;
      font-weight: bold;
    }

    #schedule tr:nth-child(even) {
      background-color: #f8f9fa;
    }

    #schedule tr:hover {
      background-color: #e9f5ff;
    }

    textarea, input[type="text"], input[type="file"], button {
      width: 100%;
      padding: 12px;
      margin: 10px 0;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 1rem;
      box-sizing: border-box;
    }

    textarea:focus, input[type="text"]:focus {
      border-color: #004d99;
      outline: none;
      box-shadow: 0 0 8px rgba(0, 77, 153, 0.2);
    }

    button {
      background-color: #004d99;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: #003366;
    }

    .notes-list {
      list-style: none;
      padding: 0;
    }

    .notes-list li {
      background: #f9f9f9;
      margin: 10px 0;
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      cursor: pointer;
      transition: box-shadow 0.3s ease, transform 0.2s ease;
    }

    .notes-list li:hover {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
      transform: scale(1.03);
    }

    .notes-list img {
      max-width: 100%;
      margin-top: 10px;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    #calendar {
      text-align: center;
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 10px;
      background: #f8f9fa;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .timer-section {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 15px;
    }

    .timer {
      padding: 15px;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 10px;
      flex: 1;
      text-align: center;
      font-size: 1rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s ease;
    }

    .timer:hover {
      transform: scale(1.05);
    }

    .timer span {
      font-weight: bold;
      font-size: 1.2rem;
    }
  </style>
</head>
<body>
  <header>
    <h1>Obafemi Awolowo University</h1>
    <h2>Students Support System</h2>
  </header>
  <div class="container">
    <!-- Class Scheduler -->
    <div class="section" id="schedule">
      <h3>Class Scheduler</h3>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Day</th>
              <th>Course</th>
              <th>Time</th>
              <th>Venue</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="timetableBody"></tbody>
        </table>
      </div>
      <h4>Add Timetable Entry</h4>
      <input type="text" id="dayInput" placeholder="Day">
      <input type="text" id="courseInput" placeholder="Course">
      <input type="text" id="timeInput" placeholder="Time">
      <input type="text" id="venueInput" placeholder="Venue">
      <button onclick="addTimetableEntry()">Add Entry</button>
    </div>

    <!-- Notes -->
    <div class="section" id="notes">
      <h3>Take Notes</h3>
      <textarea id="noteText" rows="5" placeholder="Write your notes here..."></textarea>
      <input type="file" id="mediaUpload" accept="image/*">
      <button onclick="saveNote()">Save Note</button>
    </div>

    <!-- Saved Notes -->
    <div class="section" id="savedNotes">
      <h3>Saved Notes</h3>
      <ul class="notes-list" id="notesList"></ul>
    </div>

    <!-- Calendar -->
    <div class="section" id="calendar">
      <h3>Calendar</h3>
      <div id="currentDate"></div>
    </div>

    <!-- Timer -->
    <div class="section timer-section" id="timerSection">
      <div class="timer" id="autoTimer">Auto Timer: <span id="autoTime">0</span>s</div>
      <div class="timer" id="manualTimer">
        Manual Timer: <span id="manualTime">0</span>s
        <button onclick="startManualTimer()">Start</button>
        <button onclick="stopManualTimer()">Stop</button>
      </div>
    </div>
  </div>

  <script>
    // Welcome Message
    let studentName = localStorage.getItem('studentName');
    if (!studentName) {
      studentName = prompt('Enter your full name:');
      if (studentName) {
        localStorage.setItem('studentName', studentName);
      }
    }
    if (studentName) {
      alert(`Welcome, ${studentName}! Keep striving for excellence.`);
    }

    // Load Timetable
    function loadTimetable() {
      const timetableBody = document.getElementById('timetableBody');
      const timetable = JSON.parse(localStorage.getItem('timetable')) || [];
      timetableBody.innerHTML = '';
      timetable.forEach((entry, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${entry.day}</td>
          <td>${entry.course}</td>
          <td>${entry.time}</td>
          <td>${entry.venue}</td>
          <td>
            <button onclick="editTimetableEntry(${index})">Edit</button>
            <button onclick="deleteTimetableEntry(${index})">Delete</button>
          </td>
        `;
        timetableBody.appendChild(row);
      });
    }

    // Add Timetable Entry
    function addTimetableEntry() {
      const day = document.getElementById('dayInput').value.trim();
      const course = document.getElementById('courseInput').value.trim();
      const time = document.getElementById('timeInput').value.trim();
      const venue = document.getElementById('venueInput').value.trim();
      if (day && course && time && venue) {
        const timetable = JSON.parse(localStorage.getItem('timetable')) || [];
        timetable.push({ day, course, time, venue });
        localStorage.setItem('timetable', JSON.stringify(timetable));
        loadTimetable();
        document.getElementById('dayInput').value = '';
        document.getElementById('courseInput').value = '';
        document.getElementById('timeInput').value = '';
        document.getElementById('venueInput').value = '';
      }
    }

    // Edit Timetable Entry
    function editTimetableEntry(index) {
      const timetable = JSON.parse(localStorage.getItem('timetable')) || [];
      const entry = timetable[index];
      document.getElementById('dayInput').value = entry.day;
      document.getElementById('courseInput').value = entry.course;
      document.getElementById('timeInput').value = entry.time;
      document.getElementById('venueInput').value = entry.venue;
      deleteTimetableEntry(index);
    }

    // Delete Timetable Entry
    function deleteTimetableEntry(index) {
      const timetable = JSON.parse(localStorage.getItem('timetable')) || [];
      timetable.splice(index, 1);
      localStorage.setItem('timetable', JSON.stringify(timetable));
      loadTimetable();
    }

    // Load Notes with Functional Popup
    function loadNotes() {
      const notesList = document.getElementById('notesList');
      const storedNotes = JSON.parse(localStorage.getItem('notes')) || [];
      notesList.innerHTML = ''; // Clear previous notes
      storedNotes.forEach((note) => {
        const noteItem = document.createElement('li');
        noteItem.innerHTML = `
        
                <p>${note.text}</p>
          ${note.image ? `<img src="${note.image}" alt="Uploaded Image">` : ''}
        `;
        noteItem.addEventListener('click', () => alert(note.text));
        notesList.appendChild(noteItem);
      });
    }

    // Save Note to Local Storage
    function saveNote() {
      const noteText = document.getElementById('noteText').value.trim();
      const mediaUpload = document.getElementById('mediaUpload').files[0];
      const reader = new FileReader();
      const storedNotes = JSON.parse(localStorage.getItem('notes')) || [];

      reader.onload = function () {
        const newNote = { text: noteText, image: reader.result };
        storedNotes.push(newNote);
        localStorage.setItem('notes', JSON.stringify(storedNotes));
        loadNotes();
        document.getElementById('noteText').value = '';
        document.getElementById('mediaUpload').value = '';
      };

      if (mediaUpload) {
        reader.readAsDataURL(mediaUpload);
      } else {
        const newNote = { text: noteText, image: null };
        storedNotes.push(newNote);
        localStorage.setItem('notes', JSON.stringify(storedNotes));
        loadNotes();
        document.getElementById('noteText').value = '';
      }
    }

    // Calendar
    function updateCalendar() {
      const date = new Date();
      document.getElementById('currentDate').innerText = date.toDateString();
    }
    updateCalendar();

    // Timers
    let autoTime = 0, manualTime = 0, manualInterval;
    setInterval(() => {
      autoTime++;
      document.getElementById('autoTime').innerText = autoTime;
    }, 1000);

    function startManualTimer() {
      if (!manualInterval) {
        manualInterval = setInterval(() => {
          manualTime++;
          document.getElementById('manualTime').innerText = manualTime;
        }, 1000);
      }
    }

    function stopManualTimer() {
      clearInterval(manualInterval);
      manualInterval = null;
    }

    // Load Notes and Timetable on Page Load
    document.addEventListener('DOMContentLoaded', () => {
      loadTimetable();
      loadNotes();
    });
  </script>
</body>
</html>
