<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>Untitled</title>
  <link rel="stylesheet" href="./style.css">

</head>
<body>
<body>
    <!-- Logo Section -->
    <div id="logo-section">
        <img src="images/logo.png" alt="App Logo" id="app-logo">
    </div>


<!-- partial:index.partial.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OAU Students Calendar</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <!-- Welcome Pop-Up -->
    <div id="welcome-popup" class="popup">
        <div class="popup-content">
            <h2>Welcome to OAU Students Calendar</h2>
            <p id="motivational-quote"></p>
            <button id="close-popup" onclick="closeWelcomePopup()">Close</button>
        </div>
    </div>

    <!-- Header Section -->
    <header>
        <h1>OAU Students Calendar</h1>
        <p>Effortlessly manage your lecture timetable and notes</p>
    </header>

    <main>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lecture Timetable</title>
    <style>
        /* General Styling */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f9f9f9;
        }

        h2 {
            text-align: center;
            color: #333;
        }

        /* Timetable Section */
        #timetable-section {
            max-width: 900px;
            margin: 20px auto;
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow-x: hidden;
        }

        /* Scrollable Table */
        .table-container {
            overflow-x: auto;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            min-width: 800px; /* Prevents shrinking */
        }

        table th, table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: center;
            white-space: nowrap; /* Prevents text wrapping */
        }

        table th {
            background-color: #007BFF;
            color: white;
        }

        table td {
            background-color: #f4f4f4;
        }

        /* Buttons Styling */
        #action-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        #action-buttons button {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            background-color: #007BFF;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #action-buttons button:hover {
            background-color: #0056b3;
        }

        #action-buttons button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <!-- Timetable Section -->
    <div id="timetable-section">
        <h2>Lecture Timetable</h2>
        <div class="table-container">
            <table id="lecture-timetable">
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Day</th>
                        <th>Course</th>
                        <th>Time</th>
                        <th>Venue</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically added here -->
                </tbody>
            </table>
        </div>

        <!-- Action Buttons -->
        <div id="action-buttons">
            <button id="add-row-btn">Add Row</button>
            <button id="edit-btn">Edit</button>
            <button id="save-btn" disabled>Save</button>
            <button id="clear-btn">Clear All</button>
        </div>
    </div>

    <script>
        // JavaScript for Lecture Timetable Functionality
        const timetable = document.getElementById('lecture-timetable').getElementsByTagName('tbody')[0];
        const addRowBtn = document.getElementById('add-row-btn');
        const editBtn = document.getElementById('edit-btn');
        const saveBtn = document.getElementById('save-btn');
        const clearBtn = document.getElementById('clear-btn');

        let rowCount = 0; // To keep track of the number of rows
        let isEditable = false; // To track edit mode

        // Function to Add a New Row
        addRowBtn.addEventListener('click', () => {
            rowCount++;
            const newRow = timetable.insertRow();
            newRow.innerHTML = `
                <td>${rowCount}</td>
                <td><input type="text" placeholder="Day" disabled></td>
                <td><input type="text" placeholder="Course" disabled></td>
                <td><input type="text" placeholder="Time" disabled></td>
                <td><input type="text" placeholder="Venue" disabled></td>
                <td><button class="delete-row-btn">Delete</button></td>
            `;

            // Add Delete Row Functionality
            const deleteRowBtn = newRow.querySelector('.delete-row-btn');
            deleteRowBtn.addEventListener('click', () => deleteRow(newRow));
        });

        // Function to Enable Edit Mode
        editBtn.addEventListener('click', () => {
            if (!isEditable) {
                const confirmEdit = confirm('Are you sure you want to enable edit mode?');
                if (confirmEdit) {
                    enableEditing();
                    alert('Edit mode enabled. You can now modify the timetable.');
                }
            } else {
                alert('Edit mode is already enabled.');
            }
        });

        // Enable Editing for All Rows
        function enableEditing() {
            isEditable = true;
            saveBtn.disabled = false;
            const inputs = timetable.querySelectorAll('input');
            inputs.forEach(input => {
                input.removeAttribute('disabled');
            });
        }

        // Save Changes and Disable Editing
        saveBtn.addEventListener('click', () => {
            disableEditing();
            alert('Changes saved successfully!');
        });

        // Disable Editing
        function disableEditing() {
            isEditable = false;
            saveBtn.disabled = true;
            const inputs = timetable.querySelectorAll('input');
            inputs.forEach(input => {
                input.setAttribute('disabled', 'disabled');
            });
        }

        // Function to Clear All Rows
        clearBtn.addEventListener('click', () => {
            const confirmClear = confirm('Are you sure you want to clear all rows?');
            if (confirmClear) {
                timetable.innerHTML = '';
                rowCount = 0;
            }
        });

        // Function to Delete a Specific Row
        function deleteRow(row) {
            row.remove();
            rowCount--;
        }
    </script>
</body>
</html>


        <!-- Notes Section -->
        <section id="notes-section">
            <h2>Your Notes</h2>
            <div id="notes-list" class="notes-list">
                <!-- Notes will be dynamically added here -->
            </div>
            <div class="note-input">
                <textarea id="new-note-content" placeholder="Write a new note..."></textarea>
            <div class="note-buttons">
                <button id="add-note">Add Note</button>
                <button id="clear-notes">Clear All Notes</button>
            </div>
        </section>

        <!-- Timer and Stopwatch Section -->
        <section id="timer-section">
            <h2>Timer and Stopwatch</h2>
            <div class="timer-wrapper">
                <h3>Automatic Timer</h3>
                <div class="timer-display">
                    <span id="timer-minutes">00</span>:<span id="timer-seconds">00</span>
                </div>
            </div>
            <div class="stopwatch-wrapper">
                <h3>Manual Stopwatch</h3>
                <div class="stopwatch-display">
                    <span id="stopwatch-minutes">00</span>:<span id="stopwatch-seconds">00</span>
                </div>
                <div class="stopwatch-buttons">
                    <button id="start-stopwatch">Start</button>
                    <button id="stop-stopwatch">Stop</button>
                    <button id="reset-stopwatch">Reset</button>
                </div>
            </div>
        
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Note-Taking Section</title>
    <!-- Quill.js CSS -->
    <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .section {
            max-width: 1000px;
            margin: 20px auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
            overflow-x: hidden; /* Prevent horizontal scrolling */
        }

        .editor-container {
            height: 200px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow-x: hidden; /* Prevent horizontal scrolling for the editor */
        }

        .note-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: space-around;
            margin-top: 15px;
        }

        .note-buttons button {
            background: #007BFF;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

        .note-buttons button:hover {
            background: #0056b3;
        }

        .saved-notes {
            margin-top: 30px;
            overflow-x: hidden; /* Prevent saved notes section from horizontal scrolling */
        }

        .note-card {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            background: #f9f9f9;
        }

        .note-card h3 {
            margin: 0 0 10px;
        }
    </style>
</head>
<body>
    <!-- Note-Taking Section -->
    <div class="section" id="note-taking-section">
        <h2>Note-Taking Section</h2>

        <!-- Text Editor -->
        <div id="editor-container" class="editor-container"></div>

        <!-- Buttons -->
        <div class="note-buttons">
            <button id="save-note">Save Note</button>
            <button id="edit-note">Edit Note</button>
            <button id="view-note">View Notes</button>
            <button id="clear-field">Clear Field</button>
            <button id="delete-notes">Delete All Notes</button>
        </div>

        <!-- Saved Notes Section -->
        <div class="saved-notes" id="saved-notes"></div>
    </div>

    <!-- Quill.js Script -->
    <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
    <script>
        // Initialize the Quill text editor
        const quill = new Quill('#editor-container', {
            theme: 'snow',
            placeholder: 'Write your notes here...',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline'], // Text formatting
                    [{ 'script': 'sub' }, { 'script': 'super' }], // Subscript and superscript
                    ['image'], // Image upload
                ]
            }
        });

        const savedNotesContainer = document.getElementById('saved-notes');
        const saveButton = document.getElementById('save-note');
        const editButton = document.getElementById('edit-note');
        const viewButton = document.getElementById('view-note');
        const clearButton = document.getElementById('clear-field');
        const deleteButton = document.getElementById('delete-notes');

        let savedNotes = [];
        let currentlyEditingIndex = null;

        // Save Note
        saveButton.addEventListener('click', () => {
            const content = quill.root.innerHTML;
            if (content.trim() === '<p><br></p>') {
                alert('Note is empty!');
                return;
            }

            if (currentlyEditingIndex !== null) {
                // Update existing note
                savedNotes[currentlyEditingIndex] = content;
                currentlyEditingIndex = null;
                alert('Note updated successfully!');
            } else {
                // Save new note
                savedNotes.push(content);
                alert('Note saved successfully!');
            }

            renderNotes();
            clearEditor();
        });

        // Edit Note
        editButton.addEventListener('click', () => {
            const noteIndex = prompt('Enter the note number to edit:');
            if (noteIndex === null || noteIndex.trim() === '') return;

            const index = parseInt(noteIndex) - 1;
            if (index >= 0 && index < savedNotes.length) {
                quill.root.innerHTML = savedNotes[index];
                currentlyEditingIndex = index;
            } else {
                alert('Invalid note number!');
            }
        });

        // View Notes
        viewButton.addEventListener('click', () => {
            renderNotes();
        });

        // Clear Field
        clearButton.addEventListener('click', () => {
            clearEditor();
        });

        // Delete All Notes
        deleteButton.addEventListener('click', () => {
            if (confirm('Are you sure you want to delete all notes?')) {
                savedNotes = [];
                renderNotes();
            }
        });

        // Render Notes
        function renderNotes() {
            savedNotesContainer.innerHTML = '';
            savedNotes.forEach((note, index) => {
                const noteCard = document.createElement('div');
                noteCard.classList.add('note-card');
                noteCard.innerHTML = `
                    <h3>Note ${index + 1}</h3>
                    <div>${note}</div>
                `;
                savedNotesContainer.appendChild(noteCard);
            });
        }    

        // Clear Editor Field
        function clearEditor() {
            quill.root.innerHTML = '';
        }
    </script>
</body>
  
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Updated Weekly Calendar</title>
    <style>
        /* General Styling */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f9f9f9;
        }

        h2 {
            text-align: center;
            color: #333;
        }

        /* Weekly Calendar Section Styling */
        #calendar-section {
            text-align: center;
            padding: 20px;
            overflow: hidden;
        }

        /* Calendar Container with Scrollable Content */
        #calendar-container {
            width: 100%;
            max-width: 900px; /* Limit container width */
            height: 200px; /* Fix the height to make it scrollable */
            margin: 0 auto;
            overflow-x: auto; /* Allow horizontal scrolling */
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        /* Calendar Table Styling */
        #calendar-table {
            width: 100%;
            border-collapse: collapse;
            min-width: 900px; /* Prevent shrinking */
        }

        #calendar-table th {
            background-color: #FF8C00; /* Dark orange background */
            color: white;
            font-weight: bold;
            padding: 10px;
            text-align: center;
        }

        #calendar-table td {
            background-color: #fff;
            color: #333;
            font-size: 14px;
            text-align: center;
            padding: 10px;
            border: 1px solid #ddd;
        }

        #calendar-table td.current-day {
            background-color: #007BFF; /* Highlight current day in blue */
            color: white;
            font-weight: bold;
            border-radius: 4px;
        }

        /* Current Date Display */
        #current-date-display {
            margin-top: 10px;
            font-size: 16px;
            font-weight: bold;
            color: #555;
        }
    </style>
</head>
<body>
    <!-- Weekly Calendar Section -->
    <div class="section" id="calendar-section">
        <h2>Weekly Calendar</h2>
        <div id="calendar-container">
            <table id="calendar-table">
                <thead>
                    <tr>
                        <th>Sunday</th>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                        <th>Saturday</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <!-- Dates will be dynamically added by JavaScript -->
                        <td id="sunday"></td>
                        <td id="monday"></td>
                        <td id="tuesday"></td>
                        <td id="wednesday"></td>
                        <td id="thursday"></td>
                        <td id="friday"></td>
                        <td id="saturday"></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Current Date Display -->
        <div id="current-date-display"></div>
    </div>

    <script>
        // JavaScript for Dynamic Weekly Calendar Dates
        const today = new Date();
        const dayOfWeek = today.getDay(); // Sunday = 0, Monday = 1, etc.
        const dateString = today.toDateString(); // Current date as a readable string

        // Generate Dates for the Week
        const weekDates = [];
        const currentDayIndex = today.getDay();

        // Calculate the exact dates for the week (Sunday to Saturday)
        for (let i = 0; i < 7; i++) {
            const weekDate = new Date(today);
            weekDate.setDate(today.getDate() - currentDayIndex + i);
            weekDates.push(weekDate);
        }

        // Populate the Calendar Cells with Dates (Only the Day Numbers)
        const calendarCells = document.querySelectorAll('#calendar-table td');
        weekDates.forEach((date, index) => {
            const day = date.getDate(); // Get only the day number
            calendarCells[index].textContent = day; // Add day number to the cell

            if (index === dayOfWeek) {
                calendarCells[index].classList.add('current-day'); // Highlight the current day
            }
        });

        // Display the Current Date Separately (With Month and Year)
        const currentDateDisplay = document.getElementById('current-date-display');
        currentDateDisplay.textContent = `Today is: ${dateString}`;
    </script>
</body>
</html>


    <script src="js/main.js"></script>
</body>
</html>
<!-- partial -->
  <script  src="./script.js"></script>

</body>
  </html>
