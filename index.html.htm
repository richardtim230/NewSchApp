<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Support System</title>
  <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
  <style>
    body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #eef2f7;
  color: #333;
}

header {
  background: linear-gradient(90deg, #4a90e2, #0055cc);
  color: white;
  padding: 15px;
  text-align: center;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

header h1, header h2 {
  margin: 5px;
}

.container {
  max-width: 1200px;
  margin: 20px auto;
  padding: 20px;
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

h3 {
  color: #0055cc;
  border-bottom: 2px solid #0055cc;
  padding-bottom: 5px;
}

.table-wrapper {
  overflow-x: auto;
  border: 1px solid #ddd;
  border-radius: 8px;
  margin-bottom: 15px;
  overflow-x: auto;
}

table {
  border-collapse: collapse;
  width: 100%;
  table-layout: fixed;
}

th, td {
  border: 0.5px solid #ddd;
  padding: 8px;
  text-align: left;
  vertical-align: middle;
  font-size: 0.53rem;
}

th {
  background-color: #0055cc;
  color: white;
}

select, input[type="text"], button {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 0.9rem;
  margin: 5px 0;
}

button {
  background-color: #0055cc;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #003b8a;
}

#noteEditor {
  border: 1px solid #ddd;
  margin-bottom: 10px;
  height: 200px;
}

ul {
  padding: 0;
  list-style: none;
}

ul li {
  margin: 10px 0;
  padding: 10px;
  background: #f0f4fa;
  border: 1px solid #ddd;
  border-radius: 5px;
}

#categories {
  display: flex;
  gap: 5px;
  flex-wrap: wrap;
  margin-bottom: 10px;
  overflow-x: auto;
}

.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.popup-content {
  background: white;
  color: #333;
  padding: 20px;
  border-radius: 10px;
  max-width: 600px;
  width: 90%;
  text-align: left;
  overflow-y: auto;
  max-height: 80%;
}

#calendar {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 2px;
  background: #f5f5f5;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 9px;
  margin-top: 8px;
  overflow-x: auto;
}

.day {
  background: #e7eaf3;
  border: 1px solid #ddd;
  padding: 6px;
  font-size: 0.6rem;
  text-align: center;
  border-radius: 5px;
}

.day.today {
  background: #0055cc;
  color: white;
  font-weight: bold;
}

  </style>
</head>
<body>
  <header>
    <h1>Obafemi Awolowo University</h1>
    <h2>Student Support System</h2>
  </header>

  <div class="container">
    <!-- Welcome Popup -->
    <div id="welcomePopup" class="popup">
      <div class="popup-content">
        <h3>Welcome to the Student Support System!</h3>
        <p id="welcomeMessage"></p>
        <p id="motivationalMessage"></p>
        <button onclick="closeWelcomePopup()">Close</button>
      </div>
    </div>

    <!-- Class Scheduler -->
    <div id="scheduleSection">
      <h3>Class Scheduler</h3>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Time</th>
              <th>Mon</th>
              <th>Tues</th>
              <th>Wed</th>
              <th>Thur</th>
              <th>Fri</th>
            </tr>
          </thead>
          <tbody id="scheduleBody"></tbody>
        </table>
      </div>
      <h4>Add Schedule</h4>
      <select id="timeInput">
        <option value="">Select Time</option>
        <option value="8:00 AM">8:00 AM</option>
        <option value="9:00 AM">9:00 AM</option>
        <option value="10:00 AM">10:00 AM</option>
        <option value="11:00 AM">11:00 AM</option>
        <option value="12:00 PM">12:00 PM</option>
        <option value="1:00 PM">1:00 PM</option>
        <option value="2:00 PM">2:00 PM</option>
        <option value="3:00 PM">3:00 PM</option>
        <option value="4:00 PM">4:00 PM</option>
        <option value="5:00 PM">5:00 PM</option>
      </select>
      <select id="dayInput">
        <option value="">Select Day</option>
        <option value="Monday">Monday</option>
        <option value="Tuesday">Tuesday</option>
        <option value="Wednesday">Wednesday</option>
        <option value="Thursday">Thursday</option>
        <option value="Friday">Friday</option>
      </select>
      <input type="text" id="subjectInput" placeholder="Subject">
      <button onclick="addSchedule()">Add</button>
    </div>

    <!-- Notes Section -->
    <div id="notesSection">
      <h3>Notes</h3>
      <div id="categories">
        <button onclick="showCategory('Personal')">Personal</button>
        <button onclick="showCategory('Academic')">Academic</button>
        <button onclick="showCategory('Miscellaneous')">Miscellaneous</button>
        <button onclick="addCategory()">Add Category</button>
      </div>
      <div id="noteEditor"></div>
      <input type="file" id="noteMedia" accept="image/*">
      <button onclick="saveNote()">Save Note</button>
    </div>
    <ul id="notesList"></ul>

    <!-- Note Popup -->
    <div id="notePopup" class="popup">
      <div class="popup-content">
        <h3 id="noteTitle"></h3>
        <div id="noteContent"></div>
        <img id="noteMediaPreview" alt="" style="max-width: 100%; display: none;">
        <button id="editNoteButton" onclick="editNote()">Edit</button>
        <button id="deleteNoteButton" onclick="deleteNote()">Delete</button>
        <button onclick="closeNotePopup()">Close</button>
      </div>
    </div>

    <!-- Calendar -->
    <div id="calendarSection">
      <h3>Weekly Calendar</h3>
      <div id="calendar"></div>
      <p id="calendarMessage" style="margin-top: 10px; color: #0055cc; font-weight: bold;"></p>
    </div>
  </div>

  <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
  <script>
    // Initialize the rich text editor for notes
const quill = new Quill('#noteEditor', { theme: 'snow' });
let currentEditingNote = null;
const defaultCategories = ["Personal", "Academic", "Miscellaneous"];
let selectedCategory = "Personal";

const motivationalMessages = [
  "Keep pushing forward!",
  "Believe in yourself!",
  "Every day is a new opportunity to succeed!",
  "You are capable of amazing things!",
  "Never stop learning, because life never stops teaching.",
  "Dream big and dare to fail.",
  "Your potential is limitless.",
  "Be the best version of yourself.",
  "Success is a journey, not a destination.",
  "Hard work beats talent when talent doesn't work hard.",
  "Education is the key to unlocking your future.",
  "Turn challenges into opportunities.",
  "Focus on your goals, not your obstacles.",
  "Small steps lead to big changes.",
  "Consistency is the key to success.",
  "Never stop improving.",
  "Stay positive, work hard, and make it happen.",
  "Believe in the process.",
  "Learn, grow, and inspire.",
  "Education is the passport to an exciting tomorrow.", 
  "Your mind is your most powerful tool; educate it well.", 
  "Embrace learning; it's a lifelong adventure.", 
  "Challenges are stepping stones to greatness.", 
  "Replace doubt with determination.", 
  "Obstacles are opportunities in disguise.", 
  "Small acts of learning accumulate into vast knowledge.", 
  "Consistency unlocks potential.", 
  "Progress, not perfection, is the goal.", 
  "Never underestimate the power of knowledge.", 
  "Learn from your mistakes; they are valuable lessons.", 
  "Stay curious; the world is full of wonders to discover.", 
  "Education empowers you to change your life and the world.", 
  "Believe in your ability to learn and grow.", 
  "Invest in your education; it's the best investment you'll ever make.", 
  "Find your passion and let it fuel your learning.", 
  "Surround yourself with supportive learners and mentors.", 
  "Education is not a race; it's a journey.", 
  "Celebrate your successes, no matter how small.", 
  "Don't be afraid to ask questions; it's how you learn.", 
  "Embrace lifelong learning; the world is constantly evolving.", 
  "Your potential is limitless; unlock it through education.", 
  "Education is the foundation of a fulfilling life.", 
  "Knowledge is power; use it wisely.", 
  "Seek knowledge relentlessly; it's the key to self-discovery.", 
  "Turn setbacks into opportunities for growth.", 
  "Focus on what you can control: your effort and attitude.", 
  "Every day is a chance to learn something new.", 
  "Your education is your legacy; leave a positive impact.", 
  "Believe in yourself; you are capable of amazing things.", 
  "The journey of a thousand miles begins with a single step of learning."
];

// Run on page load
document.addEventListener('DOMContentLoaded', () => {
  displayWelcomePopup();
  loadCalendar();
  loadSchedule();
  loadNotes();
  showCategory("Personal");
  loadCategories();
});

// --- Welcome Popup ---
function displayWelcomePopup() {
  const studentName = localStorage.getItem('studentName') || prompt("Enter your name:");
  localStorage.setItem('studentName', studentName);
  document.getElementById('welcomeMessage').textContent = `Hello, ${studentName}!`;
  const randomMessage = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];
  document.getElementById('motivationalMessage').textContent = randomMessage;
  document.getElementById('welcomePopup').style.display = 'flex';
}

function closeWelcomePopup() {
  document.getElementById('welcomePopup').style.display = 'none';
}

// --- Class Scheduler ---
function loadSchedule() {
  const schedule = JSON.parse(localStorage.getItem('schedule')) || [];
  const scheduleBody = document.getElementById('scheduleBody');
  scheduleBody.innerHTML = schedule.map(row => `
    <tr>
      <td>${row.time}</td>
      <td>${row.days.Mon || ''}</td>
      <td>${row.days.Tue || ''}</td>
      <td>${row.days.Wed || ''}</td>
      <td>${row.days.Thu || ''}</td>
      <td>${row.days.Fri || ''}</td>
    </tr>`).join('');
}

function addSchedule() {
  const time = document.getElementById('timeInput').value;
  const day = document.getElementById('dayInput').value;
  const subject = document.getElementById('subjectInput').value;
  if (!time || !day || !subject) return alert('All fields are required.');

  const schedule = JSON.parse(localStorage.getItem('schedule')) || [];
  const existing = schedule.find(row => row.time === time);
  if (existing) {
    existing.days[day.substring(0, 3)] = subject;
  } else {
    const newRow = { time, days: { Mon: '', Tue: '', Wed: '', Thu: '', Fri: '' } };
    newRow.days[day.substring(0, 3)] = subject;
    schedule.push(newRow);
  }

  localStorage.setItem('schedule', JSON.stringify(schedule));
  loadSchedule();

  // Clear inputs
  document.getElementById('timeInput').value = '';
  document.getElementById('dayInput').value = '';
  document.getElementById('subjectInput').value = '';
}

// --- Weekly Calendar ---
function loadCalendar() {
  const calendar = document.getElementById('calendar');
  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  const today = new Date();
  const todayIndex = today.getDay();

  calendar.innerHTML = days.map((day, index) => `
    <div class="day ${index === todayIndex ? 'today' : ''}">${day}</div>
  `).join('');

  document.getElementById('calendarMessage').textContent = 'Make today count!';
}

// --- Notes Section ---
function loadNotes() {
  const notesList = document.getElementById('notesList');
  const notes = JSON.parse(localStorage.getItem('notes')) || [];
  notesList.innerHTML = notes
    .filter(note => note.category === selectedCategory)
    .map((note, index) => `
      <li>
        <h4>${note.title}</h4>
        <button onclick="showNotePopup(${index})">View</button>
      </li>`).join('');
}

function saveNote() {
  const title = prompt("Enter note title:");
  const text = quill.root.innerHTML.trim();
  const mediaInput = document.getElementById('noteMedia').files[0];
  const notes = JSON.parse(localStorage.getItem('notes')) || [];
  const reader = new FileReader();

  reader.onload = () => {
    notes.push({ title, text, media: reader.result, category: selectedCategory });
    localStorage.setItem('notes', JSON.stringify(notes));
    loadNotes();
    quill.root.innerHTML = '';
    document.getElementById('noteMedia').value = '';
  };

  if (mediaInput) {
    reader.readAsDataURL(mediaInput);
  } else {
    notes.push({ title, text, media: null, category: selectedCategory });
    localStorage.setItem('notes', JSON.stringify(notes));
    loadNotes();
    quill.root.innerHTML = '';
    document.getElementById('noteMedia').value = '';
  }
}

function showNotePopup(index) {
  const notes = JSON.parse(localStorage.getItem('notes')) || [];
  const note = notes[index];
  document.getElementById('noteTitle').textContent = note.title;
  document.getElementById('noteContent').innerHTML = note.text;
  const mediaPreview = document.getElementById('noteMediaPreview');
  if (note.media) {
    mediaPreview.src = note.media;
    mediaPreview.style.display = 'block';
  } else {
    mediaPreview.style.display = 'none';
  }
  currentEditingNote = index;
  document.getElementById('notePopup').style.display = 'flex';
}

function editNote() {
  if (currentEditingNote !== null) {
    const notes = JSON.parse(localStorage.getItem('notes')) || [];
    const note = notes[currentEditingNote];
    quill.root.innerHTML = note.text;
    notes.splice(currentEditingNote, 1);
    localStorage.setItem('notes', JSON.stringify(notes));
    loadNotes();
    closeNotePopup();
  }
}

function deleteNote() {
  if (currentEditingNote !== null) {
    const notes = JSON.parse(localStorage.getItem('notes')) || [];
    notes.splice(currentEditingNote, 1);
    localStorage.setItem('notes', JSON.stringify(notes));
    loadNotes();
    closeNotePopup();
  }
}

function closeNotePopup() {
  document.getElementById('notePopup').style.display = 'none';
}

// --- Categories ---
function addCategory() {
  const category = prompt("Enter new category name:");
  if (category) {
    const categories = JSON.parse(localStorage.getItem('categories')) || defaultCategories;
    categories.push(category);
    localStorage.setItem('categories', JSON.stringify(categories));
    loadCategories();
  }
}

function showCategory(category) {
  selectedCategory = category;
  loadNotes();
}

function loadCategories() {
  const categoriesContainer = document.getElementById('categories');
  const categories = JSON.parse(localStorage.getItem('categories')) || defaultCategories;
  categoriesContainer.innerHTML = categories.map(category => `
    <button onclick="showCategory('${category}')">${category}</button>`).join('') +
    `<button onclick="addCategory()">Add Category</button>`;
}

  </script>
</body>
</html>
