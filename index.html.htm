<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Support System</title>
  <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
  <style>
    /* General Styles */
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f5f7fa;
      color: #333;
      overflow-x: hidden;
    }

    header {
      background: linear-gradient(90deg, #004d99, #0055cc);
      color: white;
      padding: 20px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    header h1, header h2 {
      margin: 0;
    }

    .container {
      max-width: 1000px;
      margin: 20px auto;
      padding: 20px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h3 {
      color: #004d99;
      border-bottom: 2px solid #004d99;
      padding-bottom: 5px;
    }

    button {
      background-color: #004d99;
      color: white;
      border: none;
      border-radius: 5px;
      padding: 8px 15px;
      cursor: pointer;
    }

    button:hover {
      background-color: #003366;
    }

    /* Class Scheduler */
    #schedule {
      margin-bottom: 20px;
    }

    .table-wrapper {
      overflow-x: auto;
      border: 1px solid #ddd;
      border-radius: 8px;
      margin-bottom: 10px;
    }

    table {
      border-collapse: collapse;
      width: 100%;
      min-width: 800px; /* Ensures no horizontal overflow */
    }

    th, td {
      border: 1px solid #ddd;
      padding: 10px;
      text-align: center;
      vertical-align: top;
    }

    th {
      background-color: #004d99;
      color: white;
    }

    /* Notes Section */
    #noteEditor {
      border: 1px solid #ddd;
      margin-bottom: 10px;
      height: 200px;
    }

    ul#notesList {
      list-style-type: none;
      padding: 0;
    }

    ul#notesList li {
      background: #f5f5f5;
      margin: 10px 0;
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }

    /* Calendar */
    #calendar {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      grid-gap: 2px;
      overflow-y: auto;
      max-height: 300px;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 8px;
      background: #fafafa;
    }

    .day {
      padding: 8px;
      font-size: 0.9rem;
      background: #e3e8f0;
      border: 1px solid #ccc;
      text-align: center;
    }

    .day.today {
      background: #004d99;
      color: white;
      font-weight: bold;
    }

    /* Timer */
    .timer {
      background: #f5f5f5;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 10px;
      text-align: center;
    }

    /* Popup */
    .popup {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      color: white;
    }

    .popup-content {
      background: #fff;
      color: #333;
      padding: 20px;
      border-radius: 10px;
      max-width: 600px;
      width: 90%;
      text-align: left;
      overflow-y: auto;
      max-height: 80%;
    }

    .popup-content img {
      max-width: 100%;
      display: block;
      margin: 10px 0;
    }
  </style>
</head>
<body>
  <header>
    <h1>Obafemi Awolowo University</h1>
    <h2>Student Support System</h2>
  </header>

  <div class="container">
    <!-- Class Scheduler -->
    <div id="schedule">
      <h3>Class Scheduler</h3>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Time</th>
              <th>Monday</th>
              <th>Tuesday</th>
              <th>Wednesday</th>
              <th>Thursday</th>
              <th>Friday</th>
            </tr>
          </thead>
          <tbody id="timetableBody"></tbody>
        </table>
      </div>
      <h4>Add Schedule</h4>
      <input type="text" id="timeInput" placeholder="Time (e.g., 9:00 AM)">
      <input type="text" id="dayInput" placeholder="Day">
      <input type="text" id="activityInput" placeholder="Activity">
      <button onclick="addTimetableEntry()">Add</button>
    </div>

    <!-- Notes Section -->
    <div id="notes">
      <h3>Take Notes</h3>
      <div id="noteEditor"></div>
      <input type="file" id="mediaUpload" accept="image/*">
      <button onclick="saveNote()">Save Note</button>
    </div>

    <!-- Saved Notes -->
    <div id="savedNotes">
      <h3>Saved Notes</h3>
      <ul id="notesList"></ul>
    </div>

    <!-- Note Popup -->
    <div class="popup" id="notePopup">
      <div class="popup-content">
        <button onclick="closeNotePopup()">Close</button>
        <div id="popupNoteContent"></div>
      </div>
    </div>

    <!-- Calendar Section -->
    <div id="calendarSection">
      <h3>Weekly Calendar</h3>
      <div id="calendar"></div>
    </div>

    <!-- Timer Section -->
    <div id="timerSection">
      <div class="timer">
        Auto Timer: <span id="autoMinutes">0</span> mins : <span id="autoSeconds">0</span> secs
      </div>
      <div class="timer">
        Manual Timer: <span id="manualMinutes">0</span> mins : <span id="manualSeconds">0</span> secs
        <button onclick="startManualTimer()">Start</button>
        <button onclick="stopManualTimer()">Stop</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
  <script>
    const quill = new Quill('#noteEditor', { theme: 'snow' });

    document.addEventListener("DOMContentLoaded", () => {
      updateCalendar();
      loadTimetable();
      loadNotes();
    });

    // Timetable
    function loadTimetable() {
      const timetable = JSON.parse(localStorage.getItem("timetable")) || [];
      const timetableBody = document.getElementById("timetableBody");
      timetableBody.innerHTML = timetable.map((entry, i) => `
        <tr>
          <td>${entry.time}</td>
          <td>${entry.Monday || ''}</td>
          <td>${entry.Tuesday || ''}</td>
          <td>${entry.Wednesday || ''}</td>
          <td>${entry.Thursday || ''}</td>
          <td>${entry.Friday || ''}</td>
          <td>
            <button onclick="editTimetable(${i})">Edit</button>
            <button onclick="deleteTimetable(${i})">Delete</button>
          </td>
        </tr>`).join('');
    }

    function addTimetableEntry() {
      const time = document.getElementById("timeInput").value;
      const day = document.getElementById("dayInput").value;
      const activity = document.getElementById("activityInput").value;

      const timetable = JSON.parse(localStorage.getItem("timetable")) || [];
      const entry = timetable.find(e => e.time === time) || { time };
      entry[day] = activity;

      if (!timetable.some(e => e.time === time)) timetable.push(entry);
      localStorage.setItem("timetable", JSON.stringify(timetable));
      loadTimetable();
    }

    function deleteTimetable(index) {
      const timetable = JSON.parse(localStorage.getItem("timetable")) || [];
      timetable.splice(index, 1);
      localStorage.setItem("timetable", JSON.stringify(timetable));
      loadTimetable();
    }

    // Notes
    function loadNotes() {
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      const notesList = document.getElementById("notesList");
      notesList.innerHTML = notes.map((note, i) => `
        <li>
          <p>${note.text.slice(0, 50)}</p>
          ${note.image ? `<img src="${note.image}" alt="Note Image">` : ''}
          <button onclick="viewNotePopup(${i})">View</button>
          <button onclick="deleteNote(${i})">Delete</button>
        </li>`).join('');
    }

    function saveNote() {
      const text = quill.root.innerHTML;
      const file = document.getElementById("mediaUpload").files[0];
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      const reader = new FileReader();

      reader.onload = () => {
        notes.push({ text, image: reader.result });
        localStorage.setItem("notes", JSON.stringify(notes));
        loadNotes();
      };

      if (file) reader.readAsDataURL(file);
      else {
        notes.push({ text });
        localStorage.setItem("notes", JSON.stringify(notes));
        loadNotes();
      }
    }

    function deleteNote(index) {
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      notes.splice(index, 1);
      localStorage.setItem("notes", JSON.stringify(notes));
      loadNotes();
    }

    function viewNotePopup(index) {
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      const note = notes[index];
      const content = document.getElementById("popupNoteContent");
      content.innerHTML = `<p>${note.text}</p>` + (note.image ? `<img src="${note.image}">` : '');
      document.getElementById("notePopup").style.display = "flex";
    }

    function closeNotePopup() {
      document.getElementById("notePopup").style.display = "none";
    }

    // Calendar
    function updateCalendar() {
      const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
      const todayIndex = new Date().getDay() - 1; // Monday as start
      const calendar = document.getElementById("calendar");
      calendar.innerHTML = days.map((day, i) => `<div class="day ${i === todayIndex ? 'today' : ''}">${day}</div>`).join('');
    }

    // Timer
    let autoSeconds = 0, autoMinutes = 0, manualSeconds = 0, manualMinutes = 0, manualTimer;
    setInterval(() => {
      autoSeconds++;
      if (autoSeconds === 60) {
        autoSeconds = 0;
        autoMinutes++;
      }
      document.getElementById("autoSeconds").textContent = autoSeconds;
      document.getElementById("autoMinutes").textContent = autoMinutes;
    }, 1000);

    function startManualTimer() {
      manualTimer = setInterval(() => {
        manualSeconds++;
        if (manualSeconds === 60) {
          manualSeconds = 0;
          manualMinutes++;
        }
        document.getElementById("manualSeconds").textContent = manualSeconds;
        document.getElementById("manualMinutes").textContent = manualMinutes;
      }, 1000);
    }

    function stopManualTimer() {
      clearInterval(manualTimer);
    }
  </script>
</body>
</html>
