<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Support System</title>
  <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
  <style>
    /* General Styling */
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f5f7fa;
      color: #333;
      overflow-x: hidden; /* Prevent horizontal scrolling */
    }

    header {
      background: linear-gradient(90deg, #004d99, #0055cc);
      color: white;
      padding: 20px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    header h1, header h2 {
      margin: 0;
    }

    .container {
      max-width: 1200px;
      margin: 20px auto;
      padding: 20px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h3 {
      color: #004d99;
      border-bottom: 2px solid #004d99;
      padding-bottom: 5px;
    }

    button {
      background-color: #004d99;
      color: white;
      border: none;
      border-radius: 5px;
      padding: 8px 15px;
      cursor: pointer;
      margin: 5px 0;
    }

    button:hover {
      background-color: #003366;
    }

    /* Class Scheduler */
    #schedule .table-wrapper {
      overflow-x: auto;
      border: 1px solid #ddd;
      border-radius: 8px;
      margin-bottom: 10px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      table-layout: fixed;
    }

    th, td {
      border: 1px solid #ddd;
      padding: 10px;
      text-align: center;
      word-wrap: break-word;
    }

    th {
      background-color: #004d99;
      color: white;
    }

    /* Notes Section */
    #noteEditor {
      border: 1px solid #ddd;
      margin-bottom: 10px;
      height: 200px;
    }

    #savedNotes ul {
      list-style: none;
      padding: 0;
    }

    #savedNotes li {
      background: #f9f9f9;
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    #savedNotes li img {
      max-width: 100%;
      height: auto;
      border-radius: 5px;
      margin-top: 5px;
    }

    /* Calendar Section */
    #calendar {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      grid-gap: 5px;
      text-align: center;
      overflow-y: auto;
      max-height: 250px;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 10px;
      background: #fafafa;
    }

    .day {
      padding: 8px;
      font-size: 0.9rem;
      background: #e3e8f0;
      border: 1px solid #ccc;
    }

    .day.today {
      background: #004d99;
      color: white;
      font-weight: bold;
      border: 2px solid #002a66;
    }

    /* Popup */
    .popup {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      display: none;
    }

    .popup-content {
      background: white;
      color: #333;
      padding: 20px;
      border-radius: 10px;
      max-width: 600px;
      width: 90%;
      text-align: left;
      overflow-y: auto;
      max-height: 80%;
    }

    .popup-content img {
      max-width: 100%;
      display: block;
      margin: 10px 0;
      border-radius: 5px;
    }

    /* Timer Section */
    .timer {
      background: #f5f5f5;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 10px;
      text-align: center;
    }
  </style>
</head>
<body>
  <header>
    <h1>Obafemi Awolowo University</h1>
    <h2>Student Support System</h2>
  </header>

  <div class="container">
    <!-- Welcome Message -->
    <div id="welcomeMessage" class="popup">
      <div class="popup-content">
        <h3>Welcome to the Student Support System!</h3>
        <p id="studentName"></p>
        <button onclick="closePopup()">Close</button>
      </div>
    </div>

    <!-- Class Scheduler -->
    <div id="schedule">
      <h3>Class Scheduler</h3>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Time</th>
              <th>Monday</th>
              <th>Tuesday</th>
              <th>Wednesday</th>
              <th>Thursday</th>
              <th>Friday</th>
            </tr>
          </thead>
          <tbody id="timetableBody"></tbody>
        </table>
      </div>
      <h4>Add Schedule</h4>
      <input type="text" id="timeInput" placeholder="Time (e.g., 9:00 AM)">
      <input type="text" id="dayInput" placeholder="Day">
      <input type="text" id="activityInput" placeholder="Activity">
      <button onclick="addTimetableEntry()">Add</button>
    </div>

    <!-- Notes Section -->
    <div id="notes">
      <h3>Take Notes</h3>
      <div id="noteEditor"></div>
      <input type="file" id="mediaUpload" accept="image/*">
      <button onclick="saveNote()">Save Note</button>
    </div>

    <!-- Saved Notes -->
    <div id="savedNotes">
      <h3>Saved Notes</h3>
      <ul id="notesList"></ul>
    </div>

    <!-- Note Popup -->
    <div class="popup" id="notePopup">
      <div class="popup-content">
        <button onclick="closeNotePopup()">Close</button>
        <div id="popupNoteContent"></div>
      </div>
    </div>

    <!-- Calendar Section -->
    <div id="calendarSection">
      <h3>Weekly Calendar</h3>
      <div id="calendar"></div>
    </div>

    <!-- Timer Section -->
    <div id="timerSection">
      <div class="timer">
        Auto Timer: <span id="autoMinutes">0</span> mins : <span id="autoSeconds">0</span> secs
      </div>
      <div class="timer">
        Manual Timer: <span id="manualMinutes">0</span> mins : <span id="manualSeconds">0</span> secs
        <button onclick="startManualTimer()">Start</button>
        <button onclick="stopManualTimer()">Stop</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
  <script>
    const quill = new Quill('#noteEditor', { theme: 'snow' });
    const weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];

    // Welcome Popup
    document.addEventListener("DOMContentLoaded", () => {
      let studentName = localStorage.getItem("studentName");
      if (!studentName) {
        studentName = prompt("Enter your full name:");
        localStorage.setItem("studentName", studentName);
      }
      document.getElementById("studentName").textContent = `Welcome, ${studentName}!`;
      document.getElementById("welcomeMessage").style.display = "flex";

      updateCalendar();
      loadTimetable();
      loadNotes();
    });

    function closePopup() {
      document.getElementById("welcomeMessage").style.display = "none";
    }

    // Calendar
    function updateCalendar() {
      const calendar = document.getElementById("calendar");
      const today = new Date().getDay() - 1;
      weekdays.forEach((day, index) => {
        const dayDiv = document.createElement("div");
        dayDiv.className = "day" + (index === today ? " today" : "");
        dayDiv.textContent = day;
        calendar.appendChild(dayDiv);
      });
    }

    // Timetable
    function loadTimetable() {
      const timetableBody = document.getElementById("timetableBody");
      const timetable = JSON.parse(localStorage.getItem("timetable")) || [];
      timetableBody.innerHTML = '';
      timetable.forEach(({ time, day, activity }, index) => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${time}</td>
          <td>${day}</td>
          <td>${activity}</td>
          <td>
            <button onclick="editTimetable(${index})">Edit</button>
            <button onclick="deleteTimetable(${index})">Delete</button>
          </td>`;
        timetableBody.appendChild(row);
      });
    }

    function addTimetableEntry() {
      const time = document.getElementById("timeInput").value;
      const day = document.getElementById("dayInput").value;
      const activity = document.getElementById("activityInput").value;
      const timetable = JSON.parse(localStorage.getItem("timetable")) || [];
      timetable.push({ time, day, activity });
      localStorage.setItem("timetable", JSON.stringify(timetable));
      loadTimetable();
    }

    // Notes
    function loadNotes() {
      const notesList = document.getElementById("notesList");
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      notesList.innerHTML = "";
      notes.forEach((note, index) => {
        const noteItem = document.createElement("li");
        noteItem.innerHTML = `
          <div>${note.text.slice(0, 100)}</div>
          ${note.image ? `<img src="${note.image}" alt="Uploaded Media">` : ""}
          <button onclick="showNotePopup(${index})">View</button>
          <button onclick="deleteNote(${index})">Delete</button>`;
        notesList.appendChild(noteItem);
      });
    }

    function saveNote() {
      const noteText = quill.root.innerHTML;
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      const file = document.getElementById("mediaUpload").files[0];
      const reader = new FileReader();
      reader.onload = () => {
        notes.push({ text: noteText, image: reader.result });
        localStorage.setItem("notes", JSON.stringify(notes));
        loadNotes();
      };
      if (file) reader.readAsDataURL(file);
      else {
        notes.push({ text: noteText });
        localStorage.setItem("notes", JSON.stringify(notes));
        loadNotes();
      }
    }

    function deleteNote(index) {
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      notes.splice(index, 1);
      localStorage.setItem("notes", JSON.stringify(notes));
      loadNotes();
    }

    function showNotePopup(index) {
      const notes = JSON.parse(localStorage.getItem("notes")) || [];
      const note = notes[index];
      const popupContent = document.getElementById("popupNoteContent");
      popupContent.innerHTML = `
        <div>${note.text}</div>
        ${note.image ? `<img src="${note.image}" alt="Uploaded Media">` : ""}`;
      document.getElementById("notePopup").style.display = "flex";
    }

    function closeNotePopup() {
      document.getElementById("notePopup").style.display = "none";
    }

    // Timer
    let autoTimerMinutes = 0, autoTimerSeconds = 0;
    setInterval(() => {
      autoTimerSeconds++;
      if (autoTimerSeconds === 60) {
        autoTimerSeconds = 0;
        autoTimerMinutes++;
      }
      document.getElementById("autoMinutes").textContent = autoTimerMinutes;
      document.getElementById("autoSeconds").textContent = autoTimerSeconds;
    }, 1000);

    let manualTimerMinutes = 0, manualTimerSeconds = 0, manualInterval;
    function startManualTimer() {
      manualInterval = setInterval(() => {
        manualTimerSeconds++;
        if (manualTimerSeconds === 60) {
          manualTimerSeconds = 0;
          manualTimerMinutes++;
        }
        document.getElementById("manualMinutes").textContent = manualTimerMinutes;
        document.getElementById("manualSeconds").textContent = manualTimerSeconds;
      }, 1000);
    }

    function stopManualTimer() {
      clearInterval(manualInterval);
    }
  </script>
</body>
</html>
